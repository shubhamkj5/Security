<?xml version="1.0" encoding="utf-8"?><?dbhtml 
			graphics-dir="../dbhtml/graphics" 
			css-stylesheet-dir="../dbhtml/browser"
			script-dir="../dbhtml/browser"
		?>
<slides>
   <slidesinfo>
      <title/>
   </slidesinfo>
   <foil>
      <title>../src/H0readWriteObject.java</title>
      <programlisting>import java.io.FileInputStream;&#xD;
import java.io.FileOutputStream;&#xD;
import java.io.ObjectInputStream;&#xD;
import java.io.ObjectOutputStream;&#xD;
&#xD;
public class H0readWriteObject {&#xD;
&#xD;
	static Object readFromFile(String filename) throws Exception {&#xD;
		FileInputStream fin = new FileInputStream(filename);&#xD;
		ObjectInputStream oin = new ObjectInputStream(fin);&#xD;
		Object object = oin.readObject();&#xD;
		oin.close();&#xD;
		return object;&#xD;
	}&#xD;
&#xD;
	static void writeToFile(String filename, Object object) throws Exception {&#xD;
		FileOutputStream fout = new FileOutputStream(filename);&#xD;
		ObjectOutputStream oout = new ObjectOutputStream(fout);&#xD;
		oout.writeObject(object);&#xD;
		oout.close();&#xD;
	}&#xD;
&#xD;
}</programlisting>
   </foil>
   <foil>
      <title>../src/H1hmacEx.java</title>
      <programlisting>import java.util.Arrays;&#xD;
&#xD;
import javax.crypto.KeyGenerator;&#xD;
import javax.crypto.Mac;&#xD;
import javax.crypto.SecretKey;&#xD;
&#xD;
public class H1hmacEx {&#xD;
  public static void main(String[] args) throws Exception {&#xD;
    // Generate secret key for HMAC-MD5&#xD;
    KeyGenerator kg = KeyGenerator.getInstance("HmacSHA256");&#xD;
    SecretKey sk = kg.generateKey();&#xD;
&#xD;
    // Get instance of Mac object implementing HMAC-MD5, and&#xD;
    // initialize it with the above secret key&#xD;
    Mac mac = Mac.getInstance("HmacSHA256");&#xD;
    mac.init(sk);&#xD;
    byte[] hmacSignature = mac.doFinal("Hi There".getBytes());&#xD;
    System.out.println(hmacSignature.length);&#xD;
    &#xD;
    /// Receiver&#xD;
    Mac mac2 = Mac.getInstance("HmacSHA256");&#xD;
    mac2.init(sk);&#xD;
    byte[] hmacSignature2 = mac.doFinal("Hi There".getBytes());&#xD;
    &#xD;
    System.out.println("Check: " + Arrays.equals(hmacSignature, hmacSignature2));&#xD;
       &#xD;
  }&#xD;
}</programlisting>
   </foil>
   <foil>
      <title>../src/H1hmacExBase64Encode.java</title>
      <programlisting>import java.util.Arrays;
import java.util.Base64;

import javax.crypto.KeyGenerator;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class H1hmacExBase64Encode {

	public static void main(String[] args) throws Exception {
		
		String message = "hi there" ;
		// Generate secret key for HMAC-MD5
	    KeyGenerator kg = KeyGenerator.getInstance("HmacSHA256");
	    SecretKey sk = kg.generateKey();

	    // Get instance of Mac object implementing HMAC-MD5, and
	    // initialize it with the above secret key
	    Mac mac = Mac.getInstance("HmacSHA256");
	    mac.init(sk);
	    byte[] hmacSignature = mac.doFinal(message.getBytes());
	    System.out.println(hmacSignature.length);
	    
	    // Base64 encode a secret key
	 	String encodedKey = Base64.getEncoder().encodeToString(sk.getEncoded()); 
	 	System.out.println("Encoded Key :" + encodedKey);

	    
	    /////////////////////////////////////////////////////
	    /// Receiver
	 	
	 	// Base64 decode a secret key
	 	byte[] decodedKey = Base64.getDecoder().decode(encodedKey);
	 	SecretKey sk2 = new SecretKeySpec(decodedKey, 0, decodedKey.length,"HmacSHA256");
	    
	 	Mac mac2 = Mac.getInstance("HmacSHA256");
	    mac2.init(sk2);
	    byte[] hmacSignature2 = mac.doFinal(message.getBytes());
	    
	    System.out.println("Check: " + Arrays.equals(hmacSignature, hmacSignature2));

	}

}</programlisting>
   </foil>
   <foil>
      <title>../src/H2hmacAndSend.java</title>
      <programlisting>import java.io.FileOutputStream;&#xD;
import java.io.ObjectOutputStream;&#xD;
import java.util.Base64;&#xD;
&#xD;
import javax.crypto.KeyGenerator;&#xD;
import javax.crypto.Mac;&#xD;
import javax.crypto.SecretKey;&#xD;
&#xD;
public class H2hmacAndSend {&#xD;
	static void writeToFile(String filename, Object object) throws Exception {&#xD;
		FileOutputStream fout = new FileOutputStream(filename);&#xD;
		ObjectOutputStream oout = new ObjectOutputStream(fout);&#xD;
		oout.writeObject(object);&#xD;
		oout.close();&#xD;
	}&#xD;
&#xD;
	public static void main(String[] args) throws Exception {&#xD;
		String message  = "This is the data I am sending" ;&#xD;
		// write secret key&#xD;
		KeyGenerator kg = KeyGenerator.getInstance("HmacSHA256");&#xD;
		SecretKey sk = kg.generateKey();&#xD;
		String encodedKey = Base64.getEncoder().encodeToString(sk.getEncoded());&#xD;
		writeToFile("data/secretKey", encodedKey);&#xD;
&#xD;
		// write message&#xD;
		writeToFile("data/sendText.txt", message);&#xD;
&#xD;
		// write hmac&#xD;
		byte[] textArray = message.getBytes();&#xD;
		Mac mac = Mac.getInstance("HmacSHA256");&#xD;
		mac.init(sk);&#xD;
		byte[] hmac = mac.doFinal(textArray);&#xD;
		String encodedHmac = Base64.getEncoder().encodeToString(hmac);&#xD;
		writeToFile("data/hmac", encodedHmac);&#xD;
&#xD;
		System.out.println(hmac.length);&#xD;
		System.out.println("Base64 encoded message digest " + encodedHmac);&#xD;
	}&#xD;
}</programlisting>
   </foil>
   <foil>
      <title>../src/H3hmacAndVerify.java</title>
      <programlisting>import java.io.FileInputStream;&#xD;
import java.io.ObjectInputStream;&#xD;
import java.util.Arrays;&#xD;
import java.util.Base64;&#xD;
&#xD;
import javax.crypto.Mac;&#xD;
import javax.crypto.SecretKey;&#xD;
import javax.crypto.spec.SecretKeySpec;&#xD;
&#xD;
public class H3hmacAndVerify {&#xD;
&#xD;
  static Object readFromFile(String filename) throws Exception {&#xD;
    FileInputStream fin = new FileInputStream(filename);&#xD;
    ObjectInputStream oin = new ObjectInputStream(fin);&#xD;
    Object object = oin.readObject();&#xD;
    oin.close();&#xD;
    return object;&#xD;
  }&#xD;
&#xD;
  public static void main(String[] args) throws Exception {&#xD;
    &#xD;
    // read secret key&#xD;
    String encodedKey  = (String) readFromFile("data/secretKey") ;&#xD;
    byte[] decodedKey = Base64.getDecoder().decode(encodedKey);&#xD;
    SecretKey sk = new SecretKeySpec(decodedKey, 0, decodedKey.length,"HmacSHA256"); &#xD;
    &#xD;
    String encodedHmac = (String) readFromFile("data/hmac") ;&#xD;
    byte[] sentHmac = Base64.getDecoder().decode(encodedHmac);&#xD;
    String sendText = (String) readFromFile("data/sendText.txt") ;&#xD;
    &#xD;
    // calculate hmac&#xD;
    Mac mac = Mac.getInstance("HmacSHA256");&#xD;
    mac.init(sk);&#xD;
    byte[] myHmac = mac.doFinal(sendText.getBytes());&#xD;
    &#xD;
    // check hmac&#xD;
    System.out.println("Check: " + Arrays.equals(sentHmac, myHmac));&#xD;
  }&#xD;
}</programlisting>
   </foil>
   <foil>
      <title>../src/H4ChallengeServer.java</title>
      <programlisting>import java.io.FileOutputStream;&#xD;
import java.io.InputStream;&#xD;
import java.io.ObjectOutputStream;&#xD;
import java.io.OutputStream;&#xD;
import java.io.PrintWriter;&#xD;
import java.net.ServerSocket;&#xD;
import java.net.Socket;&#xD;
import java.util.Arrays;&#xD;
import java.util.Scanner;&#xD;
&#xD;
import javax.crypto.KeyGenerator;&#xD;
import javax.crypto.Mac;&#xD;
import javax.crypto.SecretKey;&#xD;
&#xD;
public class H4ChallengeServer {&#xD;
&#xD;
  &#xD;
  static void writeToFile(String filename, Object object) throws Exception {&#xD;
    FileOutputStream fout = new FileOutputStream(filename);&#xD;
    ObjectOutputStream oout = new ObjectOutputStream(fout);&#xD;
    oout.writeObject(object);&#xD;
    oout.close();&#xD;
  }&#xD;
  &#xD;
  public static void main(String[] args) throws Exception {&#xD;
    String challange = "We give up, come and rule us" ;&#xD;
    &#xD;
    // write secret key to file &#xD;
    KeyGenerator kg = KeyGenerator.getInstance("HmacSHA256");&#xD;
    SecretKey sk = kg.generateKey();&#xD;
    writeToFile("data/secretKey", sk) ;&#xD;
    &#xD;
    // calculate the correct response to challenge&#xD;
    Mac mac = Mac.getInstance("HmacSHA256");&#xD;
    mac.init(sk);&#xD;
    byte[] correctResponse = mac.doFinal(challange.getBytes());&#xD;
    &#xD;
    Socket s;&#xD;
    ServerSocket ss = new ServerSocket(2000);&#xD;
    while (true) {&#xD;
      System.out.println("Server: waiting for connection ..");&#xD;
      s = ss.accept();&#xD;
&#xD;
      InputStream in = s.getInputStream();&#xD;
      Scanner r = new Scanner(in);&#xD;
      OutputStream o = s.getOutputStream();&#xD;
      PrintWriter p = new PrintWriter(o);&#xD;
&#xD;
      String inputLine;&#xD;
      inputLine = r.nextLine();&#xD;
      System.out.println("Hello " + inputLine) ;&#xD;
&#xD;
      // send challenge&#xD;
      p.println("We give up, come and rule us");&#xD;
      p.flush();&#xD;
      &#xD;
      // read response from client&#xD;
      byte[] clientHmac = new byte[32] ;      &#xD;
      in.read(clientHmac) ;&#xD;
      &#xD;
      // check if response is correct&#xD;
      boolean passed = Arrays.equals(correctResponse, clientHmac) ;&#xD;
      System.out.println("Server: challenge passed :" + passed); &#xD;
      &#xD;
      if(passed) {&#xD;
        p.println("You passed ");&#xD;
      }&#xD;
      else {&#xD;
        p.println("You didn't pass ");&#xD;
      }&#xD;
      p.close() ;&#xD;
      r.close() ;&#xD;
    }       &#xD;
  }&#xD;
}</programlisting>
   </foil>
   <foil>
      <title>../src/H5ChallengeClient.java</title>
      <programlisting>import java.io.File;&#xD;
import java.io.FileInputStream;&#xD;
import java.io.InputStream;&#xD;
import java.io.ObjectInputStream;&#xD;
import java.io.OutputStream;&#xD;
import java.io.PrintWriter;&#xD;
import java.net.InetAddress;&#xD;
import java.net.Socket;&#xD;
import java.util.Arrays;&#xD;
import java.util.Scanner;&#xD;
&#xD;
import javax.crypto.KeyGenerator;&#xD;
import javax.crypto.Mac;&#xD;
import javax.crypto.SecretKey;&#xD;
&#xD;
public class H5ChallengeClient {&#xD;
  &#xD;
  static Object readFromFile(String filename) throws Exception {&#xD;
    FileInputStream fin = new FileInputStream(filename);&#xD;
    ObjectInputStream oin = new ObjectInputStream(fin);&#xD;
    Object object = oin.readObject();&#xD;
    oin.close() ;&#xD;
    return object;&#xD;
  }&#xD;
  &#xD;
  public static void main(String[] args) throws Exception {&#xD;
    &#xD;
    // read secret key&#xD;
    SecretKey sk = (SecretKey) readFromFile("data/secretKey") ;&#xD;
    &#xD;
    InetAddress inet = InetAddress.getByName("localhost");&#xD;
    Socket s = new Socket(inet, 2000);&#xD;
&#xD;
    OutputStream o = s.getOutputStream();&#xD;
    PrintWriter p = new PrintWriter(o);&#xD;
    InputStream in = s.getInputStream();&#xD;
    Scanner r = new Scanner(in);&#xD;
&#xD;
    p.println("paul");&#xD;
    p.flush();&#xD;
&#xD;
    // read challenge from server&#xD;
    String challenge = r.nextLine();&#xD;
    System.out.println("Client: Challenge is " + challenge);&#xD;
    &#xD;
    // send response&#xD;
    Mac mac = Mac.getInstance("HmacSHA256");&#xD;
    mac.init(sk);&#xD;
    byte[] result = mac.doFinal(challenge.getBytes());    &#xD;
    o.write(result) ;&#xD;
    &#xD;
    // have we passed&#xD;
    String reply = r.nextLine();&#xD;
    System.out.println("Client: Reply is " + reply);     &#xD;
  }&#xD;
}</programlisting>
   </foil>
   <foil>
      <title>../src/HexUtil.java</title>
      <programlisting>File '../src/HexUtil.java' not found.
</programlisting>
   </foil>
</slides>